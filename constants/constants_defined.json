{
  "documentation":[
    "Set of constants values as defined by the LUKSO Standards Proposals.",
    "See [LSP-2-ERC725YJSONSchema](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md )."
  ],
  "content":[
    {
      "name":"LSP6_VERSION",
      "type":"const",
      "documentation":"Version relative to the LSP6KeyManager defined as a uint256 equal to `6`.",
      "value":"6"
    },
    {
      "name":"ERC1271_VALUES",
      "type":"enum",
      "rawValueType":"String",
      "documentation":"Values returned by the `isValidSignature` function of the ERC1271 standard.\nCan be used to check if a signature is valid or not.",
      "caseIterable":true,
      "cases":[
        {
          "key":"MAGIC_VALUE",
          "value":"0x1626ba7e"
        },
        {
          "key":"FAIL_VALUE",
          "value":"0xffffffff"
        }
      ]
    },
    {
      "name":"INTERFACE_IDS",
      "type":"enum",
      "rawValueType":"String",
      "documentation":"ERC165 interface IDs for the LSP interface standards + some backward compatible ERC token standards.\nThese `bytes4` values can be used to detect if a contract implements a specific interface with `supportsInterface(interfaceId)`.",
      "caseIterable":true,
      "cases":[
        {
          "key":"ERC165",
          "value":"0x01ffc9a7"
        },
        {
          "key":"ERC1271",
          "value":"0x1626ba7e"
        },
        {
          "key":"ERC20",
          "value":"0x36372b07"
        },
        {
          "key":"ERC223",
          "value":"0x87d43052"
        },
        {
          "key":"ERC721",
          "value":"0x80ac58cd"
        },
        {
          "key":"ERC721Metadata",
          "value":"0x5b5e139f"
        },
        {
          "key":"ERC777",
          "value":"0xe58e113c"
        },
        {
          "key":"ERC1155",
          "value":"0xd9b67a26"
        },
        {
          "key":"ERC725X",
          "value":"0x570ef073"
        },
        {
          "key":"ERC725Y",
          "value":"0x714df77c"
        },
        {
          "key":"LSP0ERC725Account",
          "value":"0x0f15a0af"
        },
        {
          "key":"LSP1UniversalReceiver",
          "value":"0x6bb56a14"
        },
        {
          "key":"LSP6KeyManager",
          "value":"0xfb437414"
        },
        {
          "key":"LSP7DigitalAsset",
          "value":"0xda1f85e4"
        },
        {
          "key":"LSP8IdentifiableDigitalAsset",
          "value":"0x622e7a01"
        },
        {
          "key":"LSP9Vault",
          "value":"0x19331ad1"
        },
        {
          "key":"LSP11BasicSocialRecovery",
          "value":"0x049a28f1"
        },
        {
          "key":"LSP14Ownable2Step",
          "value":"0x94be5999"
        },
        {
          "key":"LSP17Extendable",
          "value":"0xa918fa6b"
        },
        {
          "key":"LSP17Extension",
          "value":"0xcee78b40"
        }
      ]
    },
    {
      "name":"OPERATION_TYPES",
      "type":"enum",
      "documentation":"List of ERC725X operation types.\nSee [ERC-725.md#execute](https://github.com/ERC725Alliance/ERC725/blob/develop/docs/ERC-725.md#execute ).",
      "rawValueType":"Int",
      "caseIterable":true,
      "cases":[
        {
          "key":"CALL",
          "value":0
        },
        {
          "key":"CREATE",
          "value":1
        },
        {
          "key":"CREATE2",
          "value":2
        },
        {
          "key":"STATICCALL",
          "value":3
        },
        {
          "key":"DELEGATECALL",
          "value":4
        }
      ]
    },
    {
      "name":"SupportedStandards",
      "type":"json",
      "documentation":"ERC725Y\n----------",
      "members":[
        {
          "type":"ERC725Y_JSONSchema",
          "name":"LSP3UniversalProfile",
          "documentation":"valueContent is first 4 bytes of web3.utils.sha3(\"LSP3UniversalProfile\")",
          "key":"0xeafec4d89fa9619884b60000abe425d64acd861a49b8ddf5c0b6962110481f38",
          "keyType":"Mapping",
          "valueType":"bytes",
          "valueContent":"0xabe425d6"
        },
        {
          "type":"ERC725Y_JSONSchema",
          "documentation":"valueContent is first 4 bytes of web3.utils.sha3(\"LSP4DigitalAsset\")",
          "name":"LSP4DigitalAsset",
          "key":"0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c",
          "keyType":"Mapping",
          "valueType":"bytes",
          "valueContent":"0xa4d96624"
        },
        {
          "name":"LSP9Vault",
          "documentation":"TODO",
          "type":"ERC725Y_JSONSchema",
          "key":"0xeafec4d89fa9619884b600007c0334a14085fefa8b51ae5a40895018882bdb90",
          "keyType":"Mapping",
          "valueType":"bytes",
          "valueContent":"0x7c0334a1"
        }
      ]
    },
    {
      "name":"ERC725YKeys",
      "type":"json",
      "documentation":[
        "For more infos on the type of each keys",
        "See [LSP-2-ERC725YJSONSchema](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md )."
      ],
      "members":[
        {
          "name":"LSP1",
          "type":"json",
          "documentation":"See [LSP-1-UniversalReceiver](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-1-UniversalReceiver.md ).",
          "members":[
            {
              "name":"LSP1UniversalReceiverDelegate",
              "documentation":"keccak256('LSP1UniversalReceiverDelegate')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47",
              "keyType":"Singleton",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP1UniversalReceiverDelegate:<bytes32>",
              "documentation":"LSP1UniversalReceiverDelegate:<bytes32>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x0cfc51aec37c55a4d0b10000<bytes32>",
              "keyType":"Mapping",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP17Extension:<bytes4>",
              "documentation":"LSP17Extension:<bytes4>",
              "type":"ERC725Y_JSONSchema",
              "key":"0xcee78b4094da860110960000<bytes4>",
              "keyType":"Mapping",
              "valueType":"address",
              "valueContent":"Address"
            }
          ]
        },
        {
          "name":"LSP3",
          "type":"json",
          "documentation":"See [LSP-3-UniversalProfile-Metadata](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-3-UniversalProfile-Metadata.md ).",
          "members":[
            {
              "name":"SupportedStandards:LSP3UniversalProfile",
              "type":"ERC725Y_JSONSchema",
              "documentation":"valueContent is first 4 bytes of web3.utils.sha3(\"LSP3UniversalProfile\")",
              "key":"0xeafec4d89fa9619884b60000abe425d64acd861a49b8ddf5c0b6962110481f38",
              "keyType":"Mapping",
              "valueType":"bytes4",
              "valueContent":"0xabe425d6"
            },
            {
              "name":"LSP3Profile",
              "documentation":"keccak256('LSP3Profile')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5",
              "keyType":"Singleton",
              "valueType":"bytes",
              "valueContent":"JSONURL"
            },
            {
              "name":"LSP12IssuedAssets[]",
              "documentation":"keccak256('LSP12IssuedAssets[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x7c8c3416d6cda87cd42c71ea1843df28ac4850354f988d55ee2eaa47b6dc05cd",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP12IssuedAssetsMap:<address>",
              "documentation":"keccak256('LSP12IssuedAssetsMap')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x74ac2555c10b9349e78f0000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,bytes8)",
              "valueContent":"(Bytes4,Number)"
            },
            {
              "name":"LSP5ReceivedAssets[]",
              "documentation":"keccak256('LSP5ReceivedAssets[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x6460ee3c0aac563ccbf76d6e1d07bada78e3a9514e6382b736ed3f478ab7b90b",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP5ReceivedAssetsMap:<address>",
              "documentation":"keccak256('LSP5ReceivedAssetsMap')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x812c4334633eb816c80d0000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,uint128)",
              "valueContent":"(Bytes4,Number)"
            },
            {
              "name":"LSP1UniversalReceiverDelegate",
              "documentation":"keccak256('LSP1UniversalReceiverDelegate')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47",
              "keyType":"Singleton",
              "valueType":"address",
              "valueContent":"Address"
            }
          ]
        },
        {
          "name":"LSP4",
          "type":"json",
          "documentation":"See [LSP-4-DigitalAsset-Metadata](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-4-DigitalAsset-Metadata.md ).",
          "members":[
            {
              "type":"ERC725Y_JSONSchema",
              "documentation":"valueContent is first 4 bytes of web3.utils.sha3(\"LSP4DigitalAsset\")",
              "name":"SupportedStandards:LSP4DigitalAsset",
              "key":"0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c",
              "keyType":"Mapping",
              "valueType":"bytes4",
              "valueContent":"0xa4d96624"
            },
            {
              "name":"LSP4TokenName",
              "documentation":"keccak256('LSP4TokenName')",
              "type":"ERC725Y_JSONSchema",
              "key":"0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",
              "keyType":"Singleton",
              "valueType":"string",
              "valueContent":"String"
            },
            {
              "name":"LSP4TokenSymbol",
              "documentation":"keccak256('LSP4TokenSymbol')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",
              "keyType":"Singleton",
              "valueType":"string",
              "valueContent":"String"
            },
            {
              "name":"LSP4Metadata",
              "documentation":"keccak256('LSP4Metadata')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e",
              "keyType":"Singleton",
              "valueType":"bytes",
              "valueContent":"JSONURL"
            },
            {
              "name":"LSP4Creators[]",
              "documentation":"keccak256('LSP4Creators[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP4CreatorsMap:<address>",
              "documentation":"keccak256('LSP4CreatorsMap')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x6de85eaf5d982b4e5da00000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,bytes8)",
              "valueContent":"(Bytes4,Number)"
            }
          ]
        },
        {
          "name":"LSP5",
          "type":"json",
          "documentation":"See [LSP-5-ReceivedAssets](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-5-ReceivedAssets.md ).",
          "members":[
            {
              "name":"LSP5ReceivedAssets[]",
              "documentation":"keccak256('LSP5ReceivedAssets[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x6460ee3c0aac563ccbf76d6e1d07bada78e3a9514e6382b736ed3f478ab7b90b",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP5ReceivedAssetsMap:<address>",
              "documentation":"LSP5ReceivedAssetsMap:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x812c4334633eb816c80d0000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,uint128)",
              "valueContent":"(Bytes4,Number)"
            }
          ]
        },
        {
          "name":"LSP6",
          "type":"json",
          "documentation":null,
          "members":[
            {
              "name":"AddressPermissions[]",
              "documentation":"keccak256('AddressPermissions[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0xdf30dba06db6a30e65354d9a64c609861f089545ca58c6b4dbe31a5f338cb0e3",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"AddressPermissions:Permissions",
              "documentation":"AddressPermissions:Permissions:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x4b80742de2bf82acb3630000",
              "keyType":"MappingWithGrouping",
              "valueType":"bytes32",
              "valueContent":"BitArray"
            },
            {
              "name":"AddressPermissions:AllowedCalls:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x4b80742de2bf393a64c70000<address>",
              "keyType":"MappingWithGrouping",
              "valueType":"(bytes4,address,bytes4)[CompactBytesArray]",
              "valueContent":"(Bytes4,Address,Bytes4)"
            },
            {
              "name":"AddressPermissions:AllowedERC725YDataKeys:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x4b80742de2bf866c29110000<address>",
              "keyType":"MappingWithGrouping",
              "valueType":"bytes[CompactBytesArray]",
              "valueContent":"Bytes"
            }
          ]
        },
        {
          "name":"LSP8",
          "type":"json",
          "documentation":"See [LSP-8-IdentifiableDigitalAsset](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md ).",
          "members":[
            {
              "name":"LSP8TokenIdType",
              "type":"ERC725Y_JSONSchema",
              "key":"0x715f248956de7ce65e94d9d836bfead479f7e70d69b718d47bfe7b00e05b4fe4",
              "keyType":"Singleton",
              "valueType":"uint256",
              "valueContent":"Number"
            },
            {
              "name":"LSP8MetadataAddress:<address|uint256|bytes32>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x73dcc7c3c4096cdc7f8a0000<address|uint256|bytes32>",
              "keyType":"Mapping",
              "valueType":"mixed",
              "valueContent":"Mixed"
            },
            {
              "name":"LSP8MetadataJSON:<address|uint256|bytes32>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x9a26b4060ae7f7d5e3cd0000<address|uint256|bytes32>",
              "keyType":"Mapping",
              "valueType":"bytes",
              "valueContent":"JSONURL"
            }
          ]
        },
        {
          "name":"LSP9",
          "type":"json",
          "documentation":"See [LSP-9-Vault](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-9-Vault.md ).",
          "members":[
            {
              "name":"LSP1UniversalReceiverDelegate",
              "type":"ERC725Y_JSONSchema",
              "key":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47",
              "keyType":"Singleton",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP1UniversalReceiverDelegate:<bytes32>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x0cfc51aec37c55a4d0b10000<bytes32>",
              "keyType":"Mapping",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP17Extension:<bytes4>",
              "type":"ERC725Y_JSONSchema",
              "key":"0xcee78b4094da860110960000<bytes4>",
              "keyType":"Mapping",
              "valueType":"address",
              "valueContent":"Address"
            }
          ]
        },
        {
          "name":"LSP10",
          "type":"json",
          "documentation":"See [LSP-10-ReceivedVaults](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-10-ReceivedVaults.md ).",
          "members":[
            {
              "name":"LSP10Vaults[]",
              "documentation":"keccak256('LSP10Vaults[]]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x55482936e01da86729a45d2b87a6b1d3bc582bea0ec00e38bdb340e3af6f9f06",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP10VaultsMap:<address>",
              "documentation":"LSP10VaultsMap:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x192448c3c0f88c7f238c0000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,uint128)",
              "valueContent":"(Bytes4,Number)"
            }
          ]
        },
        {
          "name":"LSP12",
          "type":"json",
          "documentation":"See [LSP-12-IssuedAssets](https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-12-IssuedAssets.md ).",
          "members":[
            {
              "name":"LSP12IssuedAssets[]",
              "documentation":"keccak256('LSP12IssuedAssets[]')",
              "type":"ERC725Y_JSONSchema",
              "key":"0x7c8c3416d6cda87cd42c71ea1843df28ac4850354f988d55ee2eaa47b6dc05cd",
              "keyType":"Array",
              "valueType":"address",
              "valueContent":"Address"
            },
            {
              "name":"LSP12IssuedAssetsMap:<address>",
              "documentation":"LSP12IssuedAssetsMap:<address>",
              "type":"ERC725Y_JSONSchema",
              "key":"0x74ac2555c10b9349e78f0000<address>",
              "keyType":"Mapping",
              "valueType":"(bytes4,bytes8)",
              "valueContent":"(Bytes4,Number)"
            }
          ]
        }
      ]
    },
    {
      "name":"BasicUPSetup_Schema",
      "type":"json",
      "members":[
        {
          "name":"LSP3Profile",
          "type":"ERC725Y_JSONSchema",
          "key":"0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5",
          "keyType":"Singleton",
          "valueType":"bytes",
          "valueContent":"JSONURL"
        },
        {
          "name":"LSP1UniversalReceiverDelegate",
          "type":"ERC725Y_JSONSchema",
          "key":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47",
          "keyType":"Singleton",
          "valueType":"address",
          "valueContent":"Address"
        },
        {
          "name":"LSP12IssuedAssets[]",
          "type":"ERC725Y_JSONSchema",
          "key":"0x3a47ab5bd3a594c3a8995f8fa58d0876c96819ca4516bd76100c92462f2f9dc0",
          "keyType":"Array",
          "valueType":"uint256",
          "valueContent":"Number"
        }
      ]
    },
    {
      "name":"ALL_PERMISSIONS",
      "type":"const",
      "documentation":"`bytes32` hex value for all the LSP6 permissions excluding REENTRANCY, DELEGATECALL and SUPER_DELEGATECALL for security (these should be set manually ).",
      "value":"\"0x00000000000000000000000000000000000000000000000000000000003f3f7f\""
    },
    {
      "name":"PERMISSIONS",
      "type":"enum",
      "documentation":"List of `bytes32` permissions from LSP6 Key Manager Standard",
      "rawValueType":"String",
      "caseIterable":true,
      "cases":[
        {
          "key":"CHANGEOWNER",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "key":"ADDCONTROLLER",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000002"
        },
        {
          "key":"CHANGEPERMISSIONS",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000004"
        },
        {
          "key":"ADDEXTENSIONS",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000008"
        },
        {
          "key":"CHANGEEXTENSIONS",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000010"
        },
        {
          "key":"ADDUNIVERSALRECEIVERDELEGATE",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000020"
        },
        {
          "key":"CHANGEUNIVERSALRECEIVERDELEGATE",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000040"
        },
        {
          "key":"REENTRANCY",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000080"
        },
        {
          "key":"SUPER_TRANSFERVALUE",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000100"
        },
        {
          "key":"TRANSFERVALUE",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000200"
        },
        {
          "key":"SUPER_CALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000400"
        },
        {
          "key":"CALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000000800"
        },
        {
          "key":"SUPER_STATICCALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000001000"
        },
        {
          "key":"STATICCALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000002000"
        },
        {
          "key":"SUPER_DELEGATECALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000004000"
        },
        {
          "key":"DELEGATECALL",
          "value":"0x0000000000000000000000000000000000000000000000000000000000008000"
        },
        {
          "key":"DEPLOY",
          "value":"0x0000000000000000000000000000000000000000000000000000000000010000"
        },
        {
          "key":"SUPER_SETDATA",
          "value":"0x0000000000000000000000000000000000000000000000000000000000020000"
        },
        {
          "key":"SETDATA",
          "value":"0x0000000000000000000000000000000000000000000000000000000000040000"
        },
        {
          "key":"ENCRYPT",
          "value":"0x0000000000000000000000000000000000000000000000000000000000080000"
        },
        {
          "key":"DECRYPT",
          "value":"0x0000000000000000000000000000000000000000000000000000000000100000"
        },
        {
          "key":"SIGN",
          "value":"0x0000000000000000000000000000000000000000000000000000000000200000"
        }
      ]
    },
    {
      "name":"LSP1_TYPE_IDS",
      "type":"enum",
      "documentation":[
        "list of standard type IDs (\"hooks\") defined in the LSPs that can be used to notify",
        "a LSP1 compliant contract about certain type of transactions or information",
        "(e.g: token transfer, vault transfer, ownership transfer, etc...)"
      ],
      "rawValueType":"String",
      "caseIterable":true,
      "cases":[
        {
          "documentation":[
            "keccak256('LSP0OwnershipTransferStarted')"
          ],
          "key":"LSP0OwnershipTransferStarted",
          "value":"0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926"
        },
        {
          "documentation":[
            "keccak256('LSP0OwnershipTransferred_SenderNotification')"
          ],
          "key":"LSP0OwnershipTransferred_SenderNotification",
          "value":"0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814"
        },
        {
          "documentation":[
            "keccak256('LSP0OwnershipTransferred_RecipientNotification')"
          ],
          "key":"LSP0OwnershipTransferred_RecipientNotification",
          "value":"0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538"
        },
        {
          "documentation":[
            "keccak256('LSP7Tokens_SenderNotification')"
          ],
          "key":"LSP7Tokens_SenderNotification",
          "value":"0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea"
        },
        {
          "documentation":[
            "keccak256('LSP7Tokens_RecipientNotification')"
          ],
          "key":"LSP7Tokens_RecipientNotification",
          "value":"0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c"
        },
        {
          "documentation":[
            "keccak256('LSP8Tokens_SenderNotification')"
          ],
          "key":"LSP8Tokens_SenderNotification",
          "value":"0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00"
        },
        {
          "documentation":[
            "keccak256('LSP8Tokens_RecipientNotification')"
          ],
          "key":"LSP8Tokens_RecipientNotification",
          "value":"0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d"
        },
        {
          "documentation":[
            "keccak256('LSP9OwnershipTransferStarted')"
          ],
          "key":"LSP9OwnershipTransferStarted",
          "value":"0xaefd43f45fed1bcd8992f23c803b6f4ec45cf6b62b0d404d565f290a471e763f"
        },
        {
          "documentation":[
            "keccak256('LSP9OwnershipTransferred_SenderNotification')"
          ],
          "key":"LSP9OwnershipTransferred_SenderNotification",
          "value":"0x0c622e58e6b7089ae35f1af1c86d997be92fcdd8c9509652022d41aa65169471"
        },
        {
          "documentation":[
            "keccak256('LSP9OwnershipTransferred_RecipientNotification')"
          ],
          "key":"LSP9OwnershipTransferred_RecipientNotification",
          "value":"0x79855c97dbc259ce395421d933d7bc0699b0f1561f988f09a9e8633fd542fe5c"
        },
        {
          "documentation":[
            "keccak256('LSP14OwnershipTransferStarted')"
          ],
          "key":"LSP14OwnershipTransferStarted",
          "value":"0xee9a7c0924f740a2ca33d59b7f0c2929821ea9837ce043ce91c1823e9c4e52c0"
        },
        {
          "documentation":[
            "keccak256('LSP14OwnershipTransferred_SenderNotification')"
          ],
          "key":"LSP14OwnershipTransferred_SenderNotification",
          "value":"0xa124442e1cc7b52d8e2ede2787d43527dc1f3ae0de87f50dd03e27a71834f74c"
        },
        {
          "documentation":[
            "keccak256('LSP14OwnershipTransferred_RecipientNotification')"
          ],
          "key":"LSP14OwnershipTransferred_RecipientNotification",
          "value":"0xe32c7debcb817925ba4883fdbfc52797187f28f73f860641dab1a68d9b32902c"
        }
      ]
    },
    {
      "name":"LSPErrors",
      "type":"json",
      "members":[
        {
          "name":"LSP1",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xa5295345":{
                "type":"LSP_Error",
                "error":"CannotRegisterEOAsAsAssets(address)",
                "message":"LSP1: EOAs cannot call the UniversalReceiverDelegate with asset/vault typeIds"
              },
              "0x4c5e815a":{
                "type":"LSP_Error",
                "error":"CallerNotLSP6LinkedTarget(address,address)",
                "message":"LSP1: Cannot write received vaults/assets on address other than the caller"
              },
              "0x114b721a":{
                "type":"LSP_Error",
                "error":"NativeTokensNotAccepted()",
                "message":"LSP1: Cannot send native tokens to the UniversalReceiverDelegate"
              }
            }
          ]
        },
        {
          "name":"LSP4",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0x85c169bd":{
                "type":"LSP_Error",
                "error":"LSP4TokenNameNotEditable()",
                "message":"LSP4: Token name cannot be edited"
              },
              "0x76755b38":{
                "type":"LSP_Error",
                "error":"LSP4TokenSymbolNotEditable()",
                "message":"LSP4: Token symbol cannot be edited"
              }
            }
          ]
        },
        {
          "name":"LSP5",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xecba7af8":{
                "type":"LSP_Error",
                "error":"InvalidLSP5ReceivedAssetsArrayLength(bytes,uint256)",
                "message":"LSP5: Invalid value for `LSP5ReceivedAssets[]` (array length)"
              },
              "0xe8a4fba":{
                "type":"LSP_Error",
                "error":"ReceivedAssetsIndexSuperiorToUint128(uint256)",
                "message":"LSP5: The index of the received assets cannot be registered if superior to uint128"
              }
            }
          ]
        },
        {
          "name":"LSP6",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xf292052a":{
                "type":"LSP_Error",
                "error":"NoPermissionsSet(address)",
                "message":"LSP6: No permissions are set for this address."
              },
              "0x3bdad6e6":{
                "type":"LSP_Error",
                "error":"NotAuthorised(address,string)",
                "message":"LSP6: Not authorized (missing permission)."
              },
              "0x45147bce":{
                "type":"LSP_Error",
                "error":"NotAllowedCall(address,address,bytes4)",
                "message":"LSP6: not authorised to interact with `to` with the provided data payload (standard, address or function of `to` not authorised)."
              },
              "0x557ae079":{
                "type":"LSP_Error",
                "error":"NotAllowedERC725YDataKey(address,bytes32)",
                "message":"LSP6: not allowed to set the ERC725Y data key."
              },
              "0x0f7d735b":{
                "type":"LSP_Error",
                "error":"NotRecognisedPermissionKey(bytes32)",
                "message":"LSP6: could not recognise the permission data key being set."
              },
              "0xfc854579":{
                "type":"LSP_Error",
                "error":"InvalidLSP6Target()",
                "message":"LSP6: cannot linked the Key Manager to address(0)."
              },
              "0xc9bd9eb9":{
                "type":"LSP_Error",
                "error":"InvalidRelayNonce(address,uint256,bytes)",
                "message":"LSP6: invalid nonce provided for signer address"
              },
              "0x2ba8851c":{
                "type":"LSP_Error",
                "error":"InvalidERC725Function(bytes4)",
                "message":"LSP6: unknown or invalid ERC725 function selector"
              },
              "0xed7fa509":{
                "type":"LSP_Error",
                "error":"NoERC725YDataKeysAllowed(address)",
                "message":"LSP6: caller has no AllowedERC725YDataKeys"
              },
              "0xae6cbd37":{
                "type":"LSP_Error",
                "error":"InvalidEncodedAllowedERC725YDataKeys(bytes,string)",
                "message":"LSP6: Invalid Encoding for the Compact Bytes Array of Allowed ERC725Y Data Keys."
              },
              "0x8f4afa38":{
                "type":"LSP_Error",
                "error":"AddressPermissionArrayIndexValueNotAnAddress(bytes32,bytes)",
                "message":"LSP6: value provided for AddressPermission[index] is not an address."
              },
              "0x55a187db":{
                "type":"LSP_Error",
                "error":"BatchExecuteParamsLengthMismatch()",
                "message":"LSP6: different number of elements for each array parameters in batch `execute(uint256[],bytes[])`"
              },
              "0xb4d50d21":{
                "type":"LSP_Error",
                "error":"BatchExecuteRelayCallParamsLengthMismatch()",
                "message":"LSP6: different number of elements for each array parameters in batch `executeRelayCall(bytes[],uint256[],bytes[])`"
              },
              "0x30a324ac":{
                "type":"LSP_Error",
                "error":"LSP6BatchInsufficientValueSent(uint256,uint256)",
                "message":"LSP6: `msg.value` sent is not enough to cover all the combined `values[]`."
              },
              "0xa51868b6":{
                "type":"LSP_Error",
                "error":"LSP6BatchExcessiveValueSent(uint256,uint256)",
                "message":"LSP6: cannot send more `msg.value` than all the combined `values[]`."
              },
              "0x6cb60587":{
                "type":"LSP_Error",
                "error":"NoCallsAllowed(address)",
                "message":"LSP6: No calls allowed for the provided address"
              },
              "0x6fd203c5":{
                "type":"LSP_Error",
                "error":"InvalidWhitelistedCall(address)",
                "message":"LSP6: LSP6: Not allowed to whitelist all calls in AllowedCalls."
              },
              "0x80d6ebae":{
                "type":"LSP_Error",
                "error":"DelegateCallDisallowedViaKeyManager()",
                "message":"LSP6: DelegateCall is disallowed via the Key Manager"
              },
              "0x3621bbcc":{
                "type":"LSP_Error",
                "error":"InvalidPayload(bytes)",
                "message":"LSP6: Invalid Payload"
              }
            }
          ]
        },
        {
          "name":"LSP7",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0x08d47949":{
                "type":"LSP_Error",
                "error":"LSP7AmountExceedsBalance(uint256,address,uint256)",
                "message":"LSP7: token amount exceeds sender's balance."
              },
              "0xf3a6b691":{
                "type":"LSP_Error",
                "error":"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)",
                "message":"LSP7: token amount exceeds operator's allowance."
              },
              "0x6355e766":{
                "type":"LSP_Error",
                "error":"LSP7CannotUseAddressZeroAsOperator()",
                "message":"LSP7: cannot authorize address(0) as operator for LSP7 token."
              },
              "0xd2d5ec30":{
                "type":"LSP_Error",
                "error":"LSP7CannotSendWithAddressZero()",
                "message":"LSP7: cannot send token with address(0)."
              },
              "0xb9afb000":{
                "type":"LSP_Error",
                "error":"LSP7CannotSendToSelf()",
                "message":"LSP7: `from` and `to` address cannot be the same"
              },
              "0x263eee8d":{
                "type":"LSP_Error",
                "error":"LSP7InvalidTransferBatch()",
                "message":"LSP7: invalid transfer batch."
              },
              "0xa608fbb6":{
                "type":"LSP_Error",
                "error":"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)",
                "message":"LSP7: token recipient does not implement LSP1 standard."
              },
              "0x26c247f4":{
                "type":"LSP_Error",
                "error":"LSP7NotifyTokenReceiverIsEOA(address)",
                "message":"LSP7: token recipient is an Externally Owned Account."
              },
              "0xdab75047":{
                "type":"LSP_Error",
                "error":"LSP7TokenOwnerCannotBeOperator()",
                "message":"LSP7: token owner cannot be an operator."
              }
            }
          ]
        },
        {
          "name":"LSP7CappedSupply",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xacf1d8c5":{
                "type":"LSP_Error",
                "error":"LSP7CappedSupplyRequired()",
                "message":"LSP7CappedSupply: cap supply number required"
              },
              "0xeacbf0d1":{
                "type":"LSP_Error",
                "error":"LSP7CappedSupplyCannotMintOverCap()",
                "message":"LSP7CappedSupply: cannot mint over the max cap supply"
              }
            }
          ]
        },
        {
          "name":"LSP8",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xae8f9a36":{
                "type":"LSP_Error",
                "error":"LSP8NonExistentTokenId(bytes32)",
                "message":"LSP8: token id does not exist."
              },
              "0x5b271ea2":{
                "type":"LSP_Error",
                "error":"LSP8NotTokenOwner(address,bytes32,address)",
                "message":"LSP8: tokenOwner given as parameter does not own this token id."
              },
              "0x1294d2a9":{
                "type":"LSP_Error",
                "error":"LSP8NotTokenOperator(bytes32,address)",
                "message":"LSP8: caller is not an operator for this token id."
              },
              "0x9577b8b3":{
                "type":"LSP_Error",
                "error":"LSP8CannotUseAddressZeroAsOperator()",
                "message":"LSP8: cannot use address(0) as an operator for token id."
              },
              "0x24ecef4d":{
                "type":"LSP_Error",
                "error":"LSP8CannotSendToAddressZero()",
                "message":"LSP8: cannot send to address(0)."
              },
              "0x5d67d6c1":{
                "type":"LSP_Error",
                "error":"LSP8CannotSendToSelf()",
                "message":"LSP8: the `from` and `to` address cannot be the same on transfer."
              },
              "0x34c7b511":{
                "type":"LSP_Error",
                "error":"LSP8TokenIdAlreadyMinted(bytes32)",
                "message":"LSP8: tokenId already exist (= already minted)."
              },
              "0x93a83119":{
                "type":"LSP_Error",
                "error":"LSP8InvalidTransferBatch()",
                "message":"LSP8: invalid transfer batch."
              },
              "0x4349776d":{
                "type":"LSP_Error",
                "error":"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)",
                "message":"LSP8: token recipient does not implement LSP1 standard."
              },
              "0x03173137":{
                "type":"LSP_Error",
                "error":"LSP8NotifyTokenReceiverIsEOA(address)",
                "message":"LSP8: token recipient is an Externally Owned Account."
              },
              "0x4aa31a8c":{
                "type":"LSP_Error",
                "error":"LSP8NonExistingOperator(address,bytes32)",
                "message":"LSP8: Cannot remove a non existing operator."
              },
              "0xa7626b68":{
                "type":"LSP_Error",
                "error":"LSP8OperatorAlreadyAuthorized(address,bytes32)",
                "message":"LSP8: Cannot authorize an existing operator twice for the same tokenId."
              },
              "0x89fdad62":{
                "type":"LSP_Error",
                "error":"LSP8TokenOwnerCannotBeOperator()",
                "message":"LSP8: Cannot authorize the token owner as an operator."
              }
            }
          ]
        },
        {
          "name":"LSP8CappedSupply",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0x38d9fc30":{
                "type":"LSP_Error",
                "error":"LSP8CappedSupplyRequired()",
                "message":"LSP8CappedSupply: cap supply number required"
              },
              "0xe8ba2291":{
                "type":"LSP_Error",
                "error":"LSP8CappedSupplyCannotMintOverCap()",
                "message":"LSP8CappedSupply: cannot mint over the max cap supply"
              }
            }
          ]
        },
        {
          "name":"LSP9",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0x5560e16d":{
                "type":"LSP_Error",
                "error":"CallerIsNotGuardian(address)",
                "message":"LSP11: The caller is not a guardian"
              },
              "0xd52858db":{
                "type":"LSP_Error",
                "error":"GuardianAlreadyExist(address)",
                "message":"LSP11: The address provided is already a guardian"
              },
              "0x3d8e524e":{
                "type":"LSP_Error",
                "error":"GuardianDoNotExist(address)",
                "message":"LSP11: The address provided is not an existing guardian"
              },
              "0x27113777":{
                "type":"LSP_Error",
                "error":"GuardiansNumberCannotGoBelowThreshold(uint256)",
                "message":"LSP11: The guardian number cannot go below the guardians threshold"
              },
              "0xe3db80bd":{
                "type":"LSP_Error",
                "error":"ThresholdCannotBeHigherThanGuardiansNumber(uint256,uint256)",
                "message":"LSP11: The guardian threshold cannot be higher than the guardians number"
              },
              "0x7f617002":{
                "type":"LSP_Error",
                "error":"SecretHashCannotBeZero()",
                "message":"LSP11: The secret hash cannot be bytes32(0)"
              },
              "0xf78f0507":{
                "type":"LSP_Error",
                "error":"ThresholdNotReachedForRecoverer(address,uint256,uint256)",
                "message":"LSP11: The caller cannot recover as he didn't reach the guardians threshold"
              },
              "0x6fa723c3":{
                "type":"LSP_Error",
                "error":"WrongPlainSecret()",
                "message":"LSP11: The plain secret provided do not produce the secret hash set by the owner"
              },
              "0x0855380c":{
                "type":"LSP_Error",
                "error":"AddressZeroNotAllowed()",
                "message":"LSP11: The address zero is not allowed to call recoverOwnership function"
              }
            }
          ]
        },
        {
          "name":"LSP11",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xa5295345":{
                "type":"LSP_Error",
                "error":"CannotRegisterEOAsAsAssets(address)",
                "message":"LSP1: EOAs cannot call the UniversalReceiverDelegate with asset/vault typeIds"
              }
            }
          ]
        },
        {
          "name":"LSP14Ownable2Step",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0x8b9bf507":{
                "type":"LSP_Error",
                "error":"NotInRenounceOwnershipInterval(uint256,uint256)",
                "message":"LSP14: Second renounce ownership call available after 100 block delay from the first call"
              },
              "0x43b248cd":{
                "type":"LSP_Error",
                "error":"CannotTransferOwnershipToSelf()",
                "message":"LSP14: Cannot transfer ownership to address(this)"
              }
            }
          ]
        },
        {
          "name":"LSP17ContractExtension",
          "type":"json",
          "members":[
            {
              "type":"Map",
              "0xbb370b2b":{
                "type":"LSP_Error",
                "error":"NoExtensionFoundForFunctionSelector(bytes4)",
                "message":"The function being called on the contract is not supported and there is no extension for it"
              }
            }
          ]
        }
      ]
    },
    {
      "type":"json",
      "name":"EventSignatures",
      "members":[
        {
          "type":"json",
          "name":"ERC173",
          "members":[
            {
              "type":"const",
              "name":"OwnershipTransfered",
              "value":"\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"",
              "documentation":[
                "event OwnershipTransferred(",
                "   address indexed previousOwner,",
                "   address indexed newOwner,",
                ");",
                "",
                "signature = keccak256('OwnershipTransferred(address,address)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"ERC725X",
          "members":[
            {
              "type":"const",
              "name":"ContractCreated",
              "value":"\"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3\"",
              "documentation":[
                "In case of `CREATE2` operation the salt will be the provided salt by the user.",
                "In case of `CREATE` operation the salt will be `bytes32(0)`.",
                "event ContractCreated(",
                "    uint256 indexed operationType,",
                "    address indexed contractAddress,",
                "    uint256 indexed value,",
                "    bytes32 salt",
                ");",
                "",
                "signature = keccak256('ContractCreated(uint256,address,uint256,bytes32)')"
              ]
            },
            {
              "type":"const",
              "name":"Executed",
              "value":"\"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e\"",
              "documentation":[
                "event Executed(",
                "     uint256 indexed _operation,",
                "     address indexed _to,",
                "     uint256 indexed _value,",
                "     bytes4 _data",
                ");",
                "",
                "signature = keccak256('Executed(uint256,address,uint256,bytes4)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"ERC725Y",
          "members":[
            {
              "type":"const",
              "name":"DataChanged",
              "value":"\"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2\"",
              "documentation":[
                "event DataChanged(",
                "     bytes32 indexed dataKey,",
                "     bytes dataValue",
                ");",
                "",
                " signature = keccak256('DataChanged(bytes32,bytes)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP0",
          "documentation":"ERC725Account",
          "members":[
            {
              "type":"const",
              "name":"ValueReceived",
              "value":"\"0x7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493\"",
              "documentation":[
                "event ValueReceived(",
                "     address indexed sender,",
                "     uint256 indexed value",
                ");",
                "",
                "signature = keccak256('ValueReceived(address,uint256)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP1",
          "members":[
            {
              "type":"const",
              "name":"UniversalReceiver",
              "value":"\"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2\"",
              "documentation":[
                "event UniversalReceiver(",
                "   address indexed from,",
                "   uint256 indexed value,",
                "   bytes32 indexed typeId,",
                "   bytes receivedData,",
                "   bytes returnedValue",
                ");",
                "",
                "signature = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP6",
          "members":[
            {
              "type":"const",
              "name":"Executed",
              "value":"\"0x4004d18dc05f04c061c306cbb394d4083af494786ab828142d6118ab2c43a492\"",
              "documentation":[
                "event Executed(",
                "    bytes4 indexed selector,",
                "    uint256 indexed value",
                ");",
                "",
                "signature = keccak256('Executed(bytes4,uint256)')"
              ]
            },
            {
              "type":"const",
              "name":"VerifiedCall",
              "value":"\"0xa54458b75709e42f79700ffb6cfc57c7e224d8a77a52c457ee7ecb8e22636280\"",
              "documentation":[
                "event VerifiedCall(",
                "    address indexed signer,",
                "    uint256 indexed value,",
                "    bytes4 indexed selector",
                ");",
                "",
                "signature = keccak256('VerifiedCall(address,uint256,bytes4)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP7",
          "members":[
            {
              "type":"const",
              "name":"Transfer",
              "value":"\"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6\"",
              "documentation":[
                "event Transfer(",
                "    address indexed operator,",
                "    address indexed from,",
                "    address indexed to,",
                "    uint256 amount,",
                "    bool force,",
                "    bytes data",
                ");",
                "",
                "signature = keccak256('Transfer(address,address,address,uint256,bool,bytes)')"
              ]
            },
            {
              "type":"const",
              "name":"AuthorizedOperator",
              "value":"\"0xd66aff874162a96578e919097b6f6d153dfd89a5cec41bb331fdb0c4aec16e2c\"",
              "documentation":[
                "event AuthorizedOperator(",
                "    address indexed operator,",
                "    address indexed tokenOwner,",
                "    uint256 indexed amount",
                ");",
                "",
                "signature = keccak256('AuthorizedOperator(address,address,uint256)')"
              ]
            },
            {
              "type":"const",
              "name":"RevokedOperator",
              "value":"\"0x50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1\"",
              "documentation":[
                "event RevokedOperator(",
                "    address indexed operator,",
                "    address indexed tokenOwner",
                ");",
                "",
                "signature = keccak256('RevokedOperator(address,address)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP8",
          "members":[
            {
              "type":"const",
              "name":"Transfer",
              "value":"\"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf\"",
              "documentation":[
                "event Transfer(",
                "    address operator,",
                "    address indexed from,",
                "    address indexed to,",
                "    bytes32 indexed tokenId,",
                "    bool force,",
                "    bytes data",
                ");",
                "",
                "signature = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')"
              ]
            },
            {
              "type":"const",
              "name":"AuthorizedOperator",
              "value":"\"0x34b797fc5a526f7bf1d2b5de25f6564fd85ae364e3ee939aee7c1ac27871a988\"",
              "documentation":[
                "event AuthorizedOperator(",
                "    address indexed operator,",
                "    address indexed tokenOwner,",
                "    bytes32 indexed tokenId",
                ");",
                "",
                "signature = keccak256('AuthorizedOperator(address,address,bytes32)')"
              ]
            },
            {
              "type":"const",
              "name":"RevokedOperator",
              "value":"\"0x17d5389f6ab6adb2647dfa0aa365c323d37adacc30b33a65310b6158ce1373d5\"",
              "documentation":[
                "event RevokedOperator(",
                "    address indexed operator,",
                "    address indexed tokenOwner,",
                "    bytes32 indexed tokenId",
                ");",
                "",
                "signature = keccak256('RevokedOperator(address,address,bytes32)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP9",
          "members":[
            {
              "type":"const",
              "name":"ValueReceived",
              "value":"\"0x7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493\"",
              "documentation":[
                "event ValueReceived(",
                "     address indexed sender,",
                "     uint256 indexed value",
                ");",
                "",
                "signature = keccak256('ValueReceived(address,uint256)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP11",
          "members":[
            {
              "type":"const",
              "name":"GuardianAdded",
              "value":"\"0x038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f969\"",
              "documentation":[
                "event GuardianAdded(address indexed newGuardian);",
                "",
                "signature = keccak256('ValueReceived(address,uint256)')"
              ]
            },
            {
              "type":"const",
              "name":"GuardianRemoved",
              "value":"\"0xb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c52\"",
              "documentation":[
                "event GuardianRemoved(address indexed removedGuardian);",
                "",
                "signature = keccak256('GuardianRemoved(address)')"
              ]
            },
            {
              "type":"const",
              "name":"GuardiansThresholdChanged",
              "value":"\"0x7146d20a2c7b7c75c203774c9f241b61698fac43a4a81ccd828f0d8162392790\"",
              "documentation":[
                "event GuardiansThresholdChanged(uint256 indexed guardianThreshold);",
                "",
                "signature = keccak256('GuardiansThresholdChanged(uint256)')"
              ]
            },
            {
              "type":"const",
              "name":"SecretHashChanged",
              "value":"\"0x2e8c5419a62207ade549fe0b66c1c85c16f5e1ed654815dee3a3f3ac41770df3\"",
              "documentation":[
                "event SecretHashChanged(bytes32 indexed secretHash);",
                "",
                "signature = keccak256('SecretHashChanged(bytes32)')"
              ]
            },
            {
              "type":"const",
              "name":"SelectedNewController",
              "value":"\"0xe43f3c1093c69ab76b2cf6246090acb2f8eab7f19ba9942dfc8b8ec446e3a3de\"",
              "documentation":[
                "event SelectedNewController(",
                "     uint256 indexed recoveryCounter,",
                "     address indexed guardian,",
                "     address indexed addressSelected",
                ");",
                "",
                "signature = keccak256('SelectedNewController(uint256,address,address)')"
              ]
            },
            {
              "type":"const",
              "name":"RecoveryProcessSuccessful",
              "value":"\"0xf4ff8803d6b43af46d48c200977209829c2f42f19f27eda1c89dbf26a28009cd\"",
              "documentation":[
                "event RecoveryProcessSuccessful(",
                "     uint256 indexed recoveryCounter,",
                "     address indexed newController,",
                "     bytes32 indexed newSecretHash,",
                "     address[] guardians",
                ");",
                "",
                "signature = keccak256('RecoveryProcessSuccessful(uint256,address,bytes32,address[])')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"Helpers",
          "members":[
            {
              "type":"const",
              "name":"ReceivedERC777",
              "value":"\"0xdc38539587ea4d67f9f649ad9269646bab26927bad175bdcdfdab5dd297d5e1c\"",
              "documentation":[
                "event ReceivedERC777(",
                "   address indexed token,",
                "   address indexed _operator,",
                "   address indexed _from,",
                "   address _to,",
                "   uint256 _amount",
                ");",
                "",
                "signature = keccak256('ReceivedERC777(address,address,address,address,uint256)')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP14Ownable2Step",
          "members":[
            {
              "type":"const",
              "name":"OwnershipTransferStarted",
              "value":"\"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700\"",
              "documentation":[
                "event OwnershipTransferStarted(",
                "   address indexed previousOwner,",
                "   address indexed newOwner",
                ");",
                "",
                "signature = keccak256('OwnershipTransferStarted(address,address)')"
              ]
            },
            {
              "type":"const",
              "name":"RenounceOwnershipStarted",
              "value":"\"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7\"",
              "documentation":[
                "event RenounceOwnershipStarted();",
                "",
                "signature = keccak256('RenounceOwnershipStarted()')"
              ]
            },
            {
              "type":"const",
              "name":"OwnershipRenounced",
              "value":"\"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce\"",
              "documentation":[
                "event OwnershipRenounced();",
                "",
                "signature = keccak256('OwnershipRenounced()')"
              ]
            }
          ]
        },
        {
          "type":"json",
          "name":"LSP16UniversalFactory",
          "members":[
            {
              "type":"const",
              "name":"ContractCreated",
              "value":"\"0xc587425c92859c27d4383bf2eb0ab8ea1670c48039f8d6375b9947b82a20f746\"",
              "documentation":[
                "event ContractCreated(",
                "   address indexed contractCreated,",
                "   bytes32 indexed providedSalt,",
                "   bool indexed initializable,",
                "   bytes initializeCalldata",
                ");",
                "",
                "signature = keccak256('ContractCreated(address,bytes32,bool,bytes)')"
              ]
            }
          ]
        }
      ]
    }
  ]
}